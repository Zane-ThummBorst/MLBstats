import datetime
import statsapi as sa
import json

'''
TODO: replace return -1 statements and give functions return types
TODO: create blanket helper functions for reoccurring error handling patterns
TODO: if applicable refactor code to either be more efficent OR be more legible
TODO: when comfortable, start implementing some pyTEST in this and automate a script for each function
'''

alphabet = 'abcdefghijklmnopqrstuvwxyz'

abbreviations = dict(gamesPlayed="GP", groundOuts="GO", airOuts="AO", runs="R", doubles="2B", triples="3B",
                     homeRuns="HR", strikeOuts="SO", baseOnBalls="BB", intentionalWalks="IW", hits="H",
                     hitByPitch="HBP", avg="AVG", atBats="AB", obp="OBP", slg="SLG", ops="OPS", caughtStealing="CS",
                     stolenBases="SB", stolenBasePercentage="SBP", groundIntoDoublePlay="GIDP", numberOfPitches="NOP",
                     plateAppearances="PA", totalBases="TB", rbi="RBI", leftOnBases="LOB", sacBunts="SAC",
                     sacFlies="SF", babip="BABIP", groundOutsToAirOuts="GO/AO", catchersInterference="CI",
                     atBatsPerHomeRun="AB/HR")

abbreviationsP = dict(gamesPlayed='GP', gamesStarted='GS', groundOuts='GO', airOuts='AO', runs='R', doubles='2B',
                      triples='3B', homeRuns='HR', strikeOuts='SO', baseOnBalls='BB', intentionalWalks='IW', hits='H',
                      hitByPitch='HBP', avg='AVG', atBats='AB', obp='OBP', slg='SLG', ops='OPS', caughtStealing='CS',
                      stolenBases='SB', stolenBasePercentage='SBP', groundIntoDoublePlay='GIDP', numberOfPitches='NOP',
                      era='ERA', inningsPitched='IP', wins='W', losses='L', saves='S', saveOpportunities='SO',
                      holds='H', blownSaves='BS', earnedRuns='ER', whip='WHIP', battersFaced='BF', outs='O',
                      gamesPitched='GP', completeGames='CG', shutouts='ShO', strikes='TS', strikePercentage='SP',
                      hitBatsmen='HB', balks='BK', wildPitches='WP', pickoffs='P', totalBases='TB',
                      groundOutsToAirouts='GOTA', winPercentage='WP', pitchesPerInning='PPI', gamesFinished='GF',
                      strikeoutWalkRatio='SWR', strikeoutsPer9Inn='K/9', walksPer9Inn='W/9', hitsPer9Inn='H/9',
                      runsScoredPer9='R/9', homeRunsPer9='HR/9', inheritedRunners='IR', inheritedRunnersScored='IRS',
                      catchersInterference='CI', sacBunts='SB', sacFlies='SF')


def get_all_team_ids():
    teams = sa.lookup_team('')
    id_set = set()
    for team in teams:
        id_set.add(team['id'])
    return id_set


'''
needs error checking on API
'''

'''
function: looks up a player given a name and returns all of their associated data (such as stats, team, nickname, etc.)
arguments: name of the player (string)
edge case(s): what if two players share the same name?
'''


def lookup(name: str):
    player_data = sa.lookup_player(name)
    if len(name) == 0 or len(player_data) == 0:
        return -1
    return player_data[0]


'''
needs number error checking (figure out range accepted)
needs API error checking
'''

'''
function: given a team ID, return the name of the team in the API (team_id is generated by the API wrapper)
arguments: team_id which should be an int * to *
edge cases: what if the team_id given is not in the range of IDs
            what if somehow we get multiple results from team? (should not be possible since it is safe to consider
                the current set of teams is static and can not be confused with)_
'''


def team_name(team_id: int):
    if team_id not in get_all_team_ids(): return -1
    team = sa.lookup_team(team_id)
    if len(team) == 0: return -1
    return team[0].get('name')


'''
needs error checking on DATE
needs error checking on number
'''

'''
function: given a date and a team, returns the boxscore of the game that team played on that day
arguments: date (String in MM/DD/YYYY format), team_id which should be an int * to *
edge case(s): what if their is no boxscore for that team on that day (no game)
'''


def getBoxScore(date, team_id: int):
    # edge_cases (double header) OR no games
    gid = sa.schedule(date=date, team=team_id)[0]['game_id']
    box = sa.boxscore_data(gamePk=gid)
    return box


'''
needs error checking on API
'''

'''
function: returns a list of stats that can be used for the league leader function of the wrapper
arguments: none
edge cases: what if the API is down and the stats cannot be retrieved?
'''


def categories():
    leader_categories_arr = []
    try:
        leader_categories = sa.get(endpoint='meta', params={'type': 'leagueLeaderTypes'})
        if len(leader_categories) == 0: return -1
        for e in leader_categories:
            leader_categories_arr.append(e['displayName'])
        if leader_categories_arr == 0: return -1
        return leader_categories_arr
    except:
        return "This service is down!"


'''
needs error checking on string(s)
needs error checking on API
'''

'''
function: returns list of league leaders of a particular stat in either pitching or hitting based on season
arguments: category (string), group (string), season(string), limit(int)
edge case(s): what if the given category/ group doesnt exist?
              what if its an old season that contains inactive players?
              what if the category doesnt make sense for the stat group?
'''


def is_valid_group(group: str):
    if not group == 'hitting' and not group =='pitching':
        return False
    else:
        return True
def statLeaders(category: str, group: str, season: str, limit: int):
    try:
        if len(category) == 0 or len(group) == 0 or len(season) == 0 or limit == 0:
            return -1
        if not is_valid_group(group) and season not in range(2003, datetime.date.today().year+1):
            return -1
        leaders = sa.league_leader_data(leaderCategories=category, limit=limit, statGroup=group, season=season)
        return leaders
    except:
        return "Service is currently down!"


'''
needs error checking on API ???
'''

'''
nothing for this yet since I don't know what if anythings gonna happen with this
'''


def season_timeline():
    data = sa.latest_season()


'''
function: returns ALL MLB standings in each division/league (example: Can retrieve win loss rankings for all teams in AL East)
arguments: NONE
edge case(s): what if the API is down?
'''


def standings():
    try:
        stand = sa.standings_data(leagueId="103,104", division="all", include_wildcard=True, season=None,
                                  standingsTypes=None, date=None)
        return stand
    except:
        return "Service is currently down!"


'''
needs number error checking
needs error checking on standing()
'''

'''
function: given a teams id, return the win loss of that team
arguments: team_id (int)
edge case(s): what if the team id is out of range/ does not exist?
'''


def teamRecord(team_id: int):
    try:
        if team_id not in get_all_team_ids():
            return -1
        stand = standings()
        for league in stand:
            for elem in stand[league]['teams']:
                if elem['team_id'] == team_id:
                    return elem
    except:
        return "service is Currently Down"


'''
id error handling
API error handling
'''

'''
function: given a team, return a list of objects that represent the players by their name, jersey number, and position
arguments: team_id (int)
edge case(s): what if team_id is out of range?
              what (if possible) should happen if for some reason a player does not have an entry for name, number, or position?
'''


def roster(team_id: int):
    if team_id not in get_all_team_ids():
        return -1
    roster_lineup = sa.roster(team_id)
    result = []
    arr = roster_lineup.split('\n')
    for player in arr:
        if player == '':
            continue
        player = (" ".join(player.split())).split(' ')
        name = ""
        for i in range(2, len(player)):
            name += player[i] + ' '
        result.append(
            {
                'number': player[0],
                'position': player[1],
                'name': name.rstrip()
            }
        )
    return result


'''
error check string
error check api
'''

'''
function: given a teams name, return its given team_id
arguments: name (string)
edge case(s): what if the team name has no matching in teams? 
'''


def nameToTeamId(name: str):
    if len(name) == 0:
        return -1
    teams = sa.lookup_team('')
    for team in teams:
        if team['teamName'] == name:
            return team['id']
    return -1


'''
error check API
'''

'''
function: returns a list of all team names in the MLB
arguments: NONE
edge case(s): What if the API is down?
'''


def allTeams():
    teams = sa.lookup_team('')
    arr = []
    num_teams = 0;
    for team in teams:
        num_teams += 1
        arr.append(team['teamName'])
    return arr


'''
error check number
error check sting(s)
error check API
'''

'''
function: given a player name, a year they may (or may not) have played, return a players stats in that category
arguments: name(string), year(int), stat(string)
edge case(s): what if the player does not exist?
              what if the player does not have stats in the year specified?
              what if the player does not have stats in a given category?
              (might not be for this function but try to find out if theres a way to see if a player is injured)
'''


def playerInfo2(name: str, year: int, stat: str):
    # Think about an edge case where there are two players with the same name????
    if len(name) == 0:
        return -1
    for player in sa.lookup_player(name):
        season_stats = sa.player_stat_data(player.get('id'), stat, 'yearByYear')
        season_stats = season_stats.get('stats')
        for season in season_stats:
            if season['season'] == str(year):
                return [season['stats'], abbreviations if stat == 'hitting' else abbreviationsP]
        return -1

def playerInfo3(name: str, year: int, stat: str):
    people = sa.get('sports_players', {'season': year})['people']
    for person in people:
        if person['fullName'] == name:
            season_stats = sa.player_stat_data(person.get('id'), stat, 'yearByYear')
            season_stats = season_stats.get('stats')
            for season in season_stats:
                if season['season'] == str(year):
                    return [season['stats'], abbreviations if stat == 'hitting' else abbreviationsP]
    return -1


def lookup2(name: str, year:int):
    people = sa.get('sports_players', {'season': year})['people']
    for person in people:
        if person['fullName'] == name:
            info = {}
            print(person)
            if person.get('nickName') == None:
                info['nickName'] = 'NONE'
            else:
                info['nickName'] = person.get('nickName')

            info['team'] = sa.get('team', params={'teamId': person.get('currentTeam')['id']})['teams'][0]['name']
            info['position'] = person.get('primaryPosition')['abbreviation']
            if person.get('primaryNumber') == None:
                info['primaryNumber'] = 'NONE'
            else:
                info['primaryNumber'] = person.get('primaryNumber')
            info['mlbDebutDate'] = person.get('mlbDebutDate')
            info['headshot'] = 'https://midfield.mlbstatic.com/v1/people/' + str(person.get('id')) + '/spots/300'
            return info
    return -1



'''
error check API
'''

'''
function: returns a set of all players that can be gathered from the wrapper API (may not include injured players)
arguments: NONE
edge case(s): What if the api is down?
'''

# this function blows but idk if theres a better way to do it
def retrieve_players():
    players = set()
    years = range(1876,datetime.date.today().year+1)
    for year in years:
        print(year)
        people = sa.get('sports_players', {'season': year})['people']
        for person in people:
            players.add(person['fullName'])
    return players

def update_player_list():
    people = list(retrieve_players())
    people_list = {'list': people}
    json_object = json.dumps(people_list, indent=4)
    with open("../sample.json", "w") as outfile:
        outfile.write(json_object)

lookup2('Keith Hernandez', 1979)
lookup2('Derek Jeter', 2003)